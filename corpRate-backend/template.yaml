AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CorpRate Backend API

Parameters:
  StageName:
    Type: String
    Default: dev
  AllowedOrigin:
    Type: String
    Default: http://localhost:5173

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: python3.13
    LoggingConfig:
      LogFormat: JSON

Resources:
  # 1. Cognito User Pool
  CorpRateUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CorpRateUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  # 2. User Pool Client
  CorpRateUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: CorpRateUserPoolClient
      UserPoolId: !Ref CorpRateUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Ref AllowedOrigin
      LogoutURLs:
        - !Ref AllowedOrigin
    DependsOn: CorpRateUserPool

  # 3. DynamoDB Table
  CorpRateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CorpRateTable
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSI1PK"
          AttributeType: "S"
        - AttributeName: "GSI1SK"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "ReviewsByTime"
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  # 4. HTTP API
  CorpRateHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowOrigins:
          - !Ref AllowedOrigin
        AllowCredentials: true
        MaxAge: 300
    DependsOn:
      - CorpRateUserPool
      - CorpRateUserPoolClient

  # 5. Lambda Functions with inline policies
  SubmitReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SubmitReviewFunction
      CodeUri: submitReview/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref CorpRateTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CorpRateTable
    DependsOn:
      - CorpRateTable
      - CorpRateHttpApi

  GetCompanyReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCompanyReviewsFunction
      CodeUri: getCompanyReviews/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref CorpRateTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CorpRateTable
    DependsOn:
      - CorpRateTable
      - CorpRateHttpApi

  GetCompaniesRatingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCompaniesRatingsFunction
      CodeUri: getCompaniesRatings/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref CorpRateTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CorpRateTable
    DependsOn:
      - CorpRateTable
      - CorpRateHttpApi

  GetRecentReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRecentReviewsFunction
      CodeUri: getRecentReviews/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref CorpRateTable
          GSI_NAME: "ReviewsByTime"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CorpRateTable
    DependsOn:
      - CorpRateTable
      - CorpRateHttpApi

  LikeReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LikeReviewFunction
      CodeUri: likeReview/
      Handler: app.lambda_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref CorpRateTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CorpRateTable
    DependsOn:
      - CorpRateTable
      - CorpRateHttpApi

  # 6. API Authorizer
  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CorpRateAuthorizer
      ApiId: !Ref CorpRateHttpApi
      AuthorizerType: JWT
      IdentitySource: ["$request.header.Authorization"]
      JwtConfiguration:
        Audience: [!Ref CorpRateUserPoolClient]
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CorpRateUserPool}"
    DependsOn:
      - CorpRateHttpApi
      - CorpRateUserPoolClient

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CorpRateUserPool
  UserPoolClientId:
    Description: Cognito Client ID
    Value: !Ref CorpRateUserPoolClient
  HttpApiUrl:
    Description: API Gateway Endpoint URL
    Value: !Sub "https://${CorpRateHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  DynamoTableName:
    Description: DynamoDB Table Name
    Value: !Ref CorpRateTable